from __future__ import annotations

from aiogram import Bot, F, Router, types
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from japan_name_bot.config import settings
from japan_name_bot.models import NameRequest, User
from japan_name_bot.services.name_conversion import convert_name as convert_name_v2
from japan_name_bot.services.subscription import is_user_subscribed

router = Router()


@router.message(F.text, ~F.text.startswith("/"))
async def on_name(message: types.Message, bot: Bot) -> None:
    if not message.from_user or not message.text:
        return
    user_id = message.from_user.id
    input_name = message.text.strip()

    # Validate word count: allow up to 3 words (to support cases like full name)
    words = [w for w in input_name.split() if w]
    if len(words) > 3:
        await message.answer(
            "–•–º–º, —á—Ç–æ-—Ç–æ –º–Ω–æ–≥–æ —Å–ª–æ–≤ üòÖ\n\n"
            "–û—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –∏–º—è (–¥–æ 3 —Å–ª–æ–≤), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôè"
        )
        return

    # React with a fire emoji to the valid name message
    try:
        await bot.set_message_reaction(
            chat_id=message.chat.id,
            message_id=message.message_id,
            reaction=[types.ReactionTypeEmoji(emoji="üî•")],
            is_big=True,
        )
    except TelegramBadRequest:
        pass

    katakana, romaji = convert_name_v2(input_name)

    username = message.from_user.username
    user, _ = await User.get_or_create(id=user_id, defaults={"username": username})
    await NameRequest.create(
        user=user,
        input_name=input_name,
        katakana=katakana,
        romaji=romaji,
        provider="offline",
    )

    subscribed = await is_user_subscribed(bot, None, user_id)
    if subscribed:
        await message.answer(
            f"<b>–¢–≤–æ–µ –∏–º—è:</b> {katakana}\n\n<b>Romaji:</b> {romaji}",
            parse_mode=ParseMode.HTML,
        )
        await message.answer(
            text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∑–≤—É—á–∏—Ç, –Ω–µ —Ç–∞–∫ –ª–∏?\n\n"
            "–£–∑–Ω–∞–π, –∫–∞–∫ –ø–æ-—è–ø–æ–Ω—Å–∫–∏ –±—É–¥–µ—Ç –∏–º—è —Ç–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ –∏ —Å–∫–∏–Ω—å –µ–º—É!",
        )
    else:
        # –ü–æ—Å—Ç—Ä–æ–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω username (@channel)
        username = settings.CHANNEL_USERNAME
        url = f"https://t.me/{username.lstrip('@')}" if username else None
        if url:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=url)]]
            )
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ "
                "—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ ‚ò∫Ô∏è",
                reply_markup=kb,
            )
        else:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ "
                "—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ ‚ò∫Ô∏è",
            )
